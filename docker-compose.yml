services:
  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: smartkick-rabbitmq
    ports:
      - "5673:5672"
      - "15673:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit deprecated_features_permit [transient_nonexcl_queues,true,global_qos,true,management_metrics_collection,true]
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - ./rabbitmq-init.sh:/rabbitmq-init.sh
    entrypoint: ["/bin/sh", "-c", "chmod +x /rabbitmq-init.sh && /rabbitmq-init.sh"]
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    networks:
      - smartkick-net

  redis:
    image: redis:7.2
    container_name: smartkick-redis
    ports:
      - "6380:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - smartkick-net

  db:
    image: postgres:17.4
    container_name: smartkick-db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - smartkick-net

  app:
    build: .
    container_name: smartkick-app
    restart: unless-stopped
    ports:
      - "8001:8000"
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - smartkick-net

  flower:
    image: mher/flower:1.2.0
    container_name: smartkick-flower
    restart: unless-stopped
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@smartkick-rabbitmq:5672/smartkick
      - FLOWER_BROKER_API=http://guest:guest@smartkick-rabbitmq:15672/api/
      - FLOWER_PORT=5555
      #- FLOWER_BASIC_AUTH=admin:your_secure_password
    ports:
      - "5556:5555"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      worker:
        condition: service_started
    networks:
      - smartkick-net

  worker:
    build: .
    container_name: smartkick-worker
    restart: unless-stopped
    command: celery -A app.core.celery_app worker --pool=solo -l info -E
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - smartkick-net

  beat:
    build: .
    container_name: smartkick-beat
    restart: unless-stopped
    command: celery -A app.core.celery_app beat --loglevel=INFO --pidfile=/tmp/celerybeat.pid
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - smartkick-net

volumes:
  rabbitmq-data:
  redis-data:
  postgres_data:

networks:
  smartkick-net:
    driver: bridge